{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useRef, useState } from 'react';\nimport useMountedState from './useMountedState';\nexport default function useAsyncFn(fn, deps, initialState) {\n  if (deps === void 0) {\n    deps = [];\n  }\n  if (initialState === void 0) {\n    initialState = {\n      loading: false\n    };\n  }\n  var lastCallId = useRef(0);\n  var isMounted = useMountedState();\n  var _a = useState(initialState),\n    state = _a[0],\n    set = _a[1];\n  var callback = useCallback(function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var callId = ++lastCallId.current;\n    if (!state.loading) {\n      set(function (prevState) {\n        return __assign(__assign({}, prevState), {\n          loading: true\n        });\n      });\n    }\n    return fn.apply(void 0, args).then(function (value) {\n      isMounted() && callId === lastCallId.current && set({\n        value: value,\n        loading: false\n      });\n      return value;\n    }, function (error) {\n      isMounted() && callId === lastCallId.current && set({\n        error: error,\n        loading: false\n      });\n      return error;\n    });\n  }, deps);\n  return [state, callback];\n}","map":null,"metadata":{},"sourceType":"module"}