{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { isNavigator, off, on } from './misc/util';\nvar nav = isNavigator ? navigator : undefined;\nvar conn = nav && (nav.connection || nav.mozConnection || nav.webkitConnection);\nfunction getConnectionState(previousState) {\n  var online = nav === null || nav === void 0 ? void 0 : nav.onLine;\n  var previousOnline = previousState === null || previousState === void 0 ? void 0 : previousState.online;\n  return {\n    online: online,\n    previous: previousOnline,\n    since: online !== previousOnline ? new Date() : previousState === null || previousState === void 0 ? void 0 : previousState.since,\n    downlink: conn === null || conn === void 0 ? void 0 : conn.downlink,\n    downlinkMax: conn === null || conn === void 0 ? void 0 : conn.downlinkMax,\n    effectiveType: conn === null || conn === void 0 ? void 0 : conn.effectiveType,\n    rtt: conn === null || conn === void 0 ? void 0 : conn.rtt,\n    saveData: conn === null || conn === void 0 ? void 0 : conn.saveData,\n    type: conn === null || conn === void 0 ? void 0 : conn.type\n  };\n}\nexport default function useNetworkState(initialState) {\n  var _a = useState(initialState !== null && initialState !== void 0 ? initialState : getConnectionState),\n    state = _a[0],\n    setState = _a[1];\n  useEffect(function () {\n    var handleStateChange = function handleStateChange() {\n      setState(getConnectionState);\n    };\n    on(window, 'online', handleStateChange, {\n      passive: true\n    });\n    on(window, 'offline', handleStateChange, {\n      passive: true\n    });\n    if (conn) {\n      on(conn, 'change', handleStateChange, {\n        passive: true\n      });\n    }\n    return function () {\n      off(window, 'online', handleStateChange);\n      off(window, 'offline', handleStateChange);\n      if (conn) {\n        off(conn, 'change', handleStateChange);\n      }\n    };\n  }, []);\n  return state;\n}","map":null,"metadata":{},"sourceType":"module"}