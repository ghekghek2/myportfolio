{"ast":null,"code":"import { useEffect } from 'react';\nimport { isBrowser, off, on } from './misc/util';\nimport useRafState from './useRafState';\nvar useWindowScroll = function useWindowScroll() {\n  var _a = useRafState(function () {\n      return {\n        x: isBrowser ? window.pageXOffset : 0,\n        y: isBrowser ? window.pageYOffset : 0\n      };\n    }),\n    state = _a[0],\n    setState = _a[1];\n  useEffect(function () {\n    var handler = function handler() {\n      setState(function (state) {\n        var pageXOffset = window.pageXOffset,\n          pageYOffset = window.pageYOffset;\n        //Check state for change, return same state if no change happened to prevent rerender\n        //(see useState/setState documentation). useState/setState is used internally in useRafState/setState.\n        return state.x !== pageXOffset || state.y !== pageYOffset ? {\n          x: pageXOffset,\n          y: pageYOffset\n        } : state;\n      });\n    };\n    //We have to update window scroll at mount, before subscription.\n    //Window scroll may be changed between render and effect handler.\n    handler();\n    on(window, 'scroll', handler, {\n      capture: false,\n      passive: true\n    });\n    return function () {\n      off(window, 'scroll', handler);\n    };\n  }, []);\n  return state;\n};\nexport default useWindowScroll;","map":null,"metadata":{},"sourceType":"module"}