{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { isBrowser } from './misc/util';\nvar useSessionStorage = function useSessionStorage(key, initialValue, raw) {\n  if (!isBrowser) {\n    return [initialValue, function () {}];\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  var _a = useState(function () {\n      try {\n        var sessionStorageValue = sessionStorage.getItem(key);\n        if (typeof sessionStorageValue !== 'string') {\n          sessionStorage.setItem(key, raw ? String(initialValue) : JSON.stringify(initialValue));\n          return initialValue;\n        } else {\n          return raw ? sessionStorageValue : JSON.parse(sessionStorageValue || 'null');\n        }\n      } catch (_a) {\n        // If user is in private mode or has storage restriction\n        // sessionStorage can throw. JSON.parse and JSON.stringify\n        // can throw, too.\n        return initialValue;\n      }\n    }),\n    state = _a[0],\n    setState = _a[1];\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useEffect(function () {\n    try {\n      var serializedState = raw ? String(state) : JSON.stringify(state);\n      sessionStorage.setItem(key, serializedState);\n    } catch (_a) {\n      // If user is in private mode or has storage restriction\n      // sessionStorage can throw. Also JSON.stringify can throw.\n    }\n  });\n  return [state, setState];\n};\nexport default useSessionStorage;","map":null,"metadata":{},"sourceType":"module"}