{"ast":null,"code":"import useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nimport { off, on } from './misc/util';\nvar isFocusedElementEditable = function isFocusedElementEditable() {\n  var activeElement = document.activeElement,\n    body = document.body;\n  if (!activeElement) {\n    return false;\n  }\n  // If not element has focus, we assume it is not editable, too.\n  if (activeElement === body) {\n    return false;\n  }\n  // Assume <input> and <textarea> elements are editable.\n  switch (activeElement.tagName) {\n    case 'INPUT':\n    case 'TEXTAREA':\n      return true;\n  }\n  // Check if any other focused element id editable.\n  return activeElement.hasAttribute('contenteditable');\n};\nvar isTypedCharGood = function isTypedCharGood(_a) {\n  var keyCode = _a.keyCode,\n    metaKey = _a.metaKey,\n    ctrlKey = _a.ctrlKey,\n    altKey = _a.altKey;\n  if (metaKey || ctrlKey || altKey) {\n    return false;\n  }\n  // 0...9\n  if (keyCode >= 48 && keyCode <= 57) {\n    return true;\n  }\n  // a...z\n  if (keyCode >= 65 && keyCode <= 90) {\n    return true;\n  }\n  // All other keys.\n  return false;\n};\nvar useStartTyping = function useStartTyping(onStartTyping) {\n  useIsomorphicLayoutEffect(function () {\n    var keydown = function keydown(event) {\n      !isFocusedElementEditable() && isTypedCharGood(event) && onStartTyping(event);\n    };\n    on(document, 'keydown', keydown);\n    return function () {\n      off(document, 'keydown', keydown);\n    };\n  }, []);\n};\nexport default useStartTyping;","map":null,"metadata":{},"sourceType":"module"}