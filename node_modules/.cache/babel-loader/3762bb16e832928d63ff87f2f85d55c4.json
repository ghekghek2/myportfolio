{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { isBrowser, off, on } from './misc/util';\nexport function getClosestBody(el) {\n  if (!el) {\n    return null;\n  } else if (el.tagName === 'BODY') {\n    return el;\n  } else if (el.tagName === 'IFRAME') {\n    var document_1 = el.contentDocument;\n    return document_1 ? document_1.body : null;\n  } else if (!el.offsetParent) {\n    return null;\n  }\n  return getClosestBody(el.offsetParent);\n}\nfunction preventDefault(rawEvent) {\n  var e = rawEvent || window.event;\n  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n  if (e.touches.length > 1) return true;\n  if (e.preventDefault) e.preventDefault();\n  return false;\n}\nvar isIosDevice = isBrowser && window.navigator && window.navigator.platform && /iP(ad|hone|od)/.test(window.navigator.platform);\nvar bodies = new Map();\nvar doc = typeof document === 'object' ? document : undefined;\nvar documentListenerAdded = false;\nexport default !doc ? function useLockBodyMock(_locked, _elementRef) {\n  if (_locked === void 0) {\n    _locked = true;\n  }\n} : function useLockBody(locked, elementRef) {\n  if (locked === void 0) {\n    locked = true;\n  }\n  var bodyRef = useRef(doc.body);\n  elementRef = elementRef || bodyRef;\n  var lock = function lock(body) {\n    var bodyInfo = bodies.get(body);\n    if (!bodyInfo) {\n      bodies.set(body, {\n        counter: 1,\n        initialOverflow: body.style.overflow\n      });\n      if (isIosDevice) {\n        if (!documentListenerAdded) {\n          on(document, 'touchmove', preventDefault, {\n            passive: false\n          });\n          documentListenerAdded = true;\n        }\n      } else {\n        body.style.overflow = 'hidden';\n      }\n    } else {\n      bodies.set(body, {\n        counter: bodyInfo.counter + 1,\n        initialOverflow: bodyInfo.initialOverflow\n      });\n    }\n  };\n  var unlock = function unlock(body) {\n    var bodyInfo = bodies.get(body);\n    if (bodyInfo) {\n      if (bodyInfo.counter === 1) {\n        bodies.delete(body);\n        if (isIosDevice) {\n          body.ontouchmove = null;\n          if (documentListenerAdded) {\n            off(document, 'touchmove', preventDefault);\n            documentListenerAdded = false;\n          }\n        } else {\n          body.style.overflow = bodyInfo.initialOverflow;\n        }\n      } else {\n        bodies.set(body, {\n          counter: bodyInfo.counter - 1,\n          initialOverflow: bodyInfo.initialOverflow\n        });\n      }\n    }\n  };\n  useEffect(function () {\n    var body = getClosestBody(elementRef.current);\n    if (!body) {\n      return;\n    }\n    if (locked) {\n      lock(body);\n    } else {\n      unlock(body);\n    }\n  }, [locked, elementRef.current]);\n  // clean up, on un-mount\n  useEffect(function () {\n    var body = getClosestBody(elementRef.current);\n    if (!body) {\n      return;\n    }\n    return function () {\n      unlock(body);\n    };\n  }, []);\n};","map":null,"metadata":{},"sourceType":"module"}