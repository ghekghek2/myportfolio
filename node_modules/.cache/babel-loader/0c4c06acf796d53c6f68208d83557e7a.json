{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { isNavigator, off, on } from './misc/util';\nimport isDeepEqual from './misc/isDeepEqual';\nvar nav = isNavigator ? navigator : undefined;\nvar isBatteryApiSupported = nav && typeof nav.getBattery === 'function';\nfunction useBatteryMock() {\n  return {\n    isSupported: false\n  };\n}\nfunction useBattery() {\n  var _a = useState({\n      isSupported: true,\n      fetched: false\n    }),\n    state = _a[0],\n    setState = _a[1];\n  useEffect(function () {\n    var isMounted = true;\n    var battery = null;\n    var handleChange = function handleChange() {\n      if (!isMounted || !battery) {\n        return;\n      }\n      var newState = {\n        isSupported: true,\n        fetched: true,\n        level: battery.level,\n        charging: battery.charging,\n        dischargingTime: battery.dischargingTime,\n        chargingTime: battery.chargingTime\n      };\n      !isDeepEqual(state, newState) && setState(newState);\n    };\n    nav.getBattery().then(function (bat) {\n      if (!isMounted) {\n        return;\n      }\n      battery = bat;\n      on(battery, 'chargingchange', handleChange);\n      on(battery, 'chargingtimechange', handleChange);\n      on(battery, 'dischargingtimechange', handleChange);\n      on(battery, 'levelchange', handleChange);\n      handleChange();\n    });\n    return function () {\n      isMounted = false;\n      if (battery) {\n        off(battery, 'chargingchange', handleChange);\n        off(battery, 'chargingtimechange', handleChange);\n        off(battery, 'dischargingtimechange', handleChange);\n        off(battery, 'levelchange', handleChange);\n      }\n    };\n  }, []);\n  return state;\n}\nexport default isBatteryApiSupported ? useBattery : useBatteryMock;","map":null,"metadata":{},"sourceType":"module"}