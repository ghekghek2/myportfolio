{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport useEffectOnce from './useEffectOnce';\nvar useUnmountPromise = function useUnmountPromise() {\n  var refUnmounted = useRef(false);\n  useEffectOnce(function () {\n    return function () {\n      refUnmounted.current = true;\n    };\n  });\n  var wrapper = useMemo(function () {\n    var race = function race(promise, onError) {\n      var newPromise = new Promise(function (resolve, reject) {\n        promise.then(function (result) {\n          if (!refUnmounted.current) resolve(result);\n        }, function (error) {\n          if (!refUnmounted.current) reject(error);else if (onError) onError(error);else console.error('useUnmountPromise', error);\n        });\n      });\n      return newPromise;\n    };\n    return race;\n  }, []);\n  return wrapper;\n};\nexport default useUnmountPromise;","map":null,"metadata":{},"sourceType":"module"}