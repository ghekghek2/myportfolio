{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { isBrowser, off, on } from './misc/util';\nvar useState = React.useState,\n  useEffect = React.useEffect,\n  useRef = React.useRef;\nvar DRAF = function DRAF(callback) {\n  return setTimeout(callback, 35);\n};\nvar useSize = function useSize(element, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.width,\n    width = _c === void 0 ? Infinity : _c,\n    _d = _b.height,\n    height = _d === void 0 ? Infinity : _d;\n  if (!isBrowser) {\n    return [typeof element === 'function' ? element({\n      width: width,\n      height: height\n    }) : element, {\n      width: width,\n      height: height\n    }];\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  var _e = useState({\n      width: width,\n      height: height\n    }),\n    state = _e[0],\n    setState = _e[1];\n  if (typeof element === 'function') {\n    element = element(state);\n  }\n  var style = element.props.style || {};\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  var ref = useRef(null);\n  var window = null;\n  var setSize = function setSize() {\n    var iframe = ref.current;\n    var size = iframe ? {\n      width: iframe.offsetWidth,\n      height: iframe.offsetHeight\n    } : {\n      width: width,\n      height: height\n    };\n    setState(size);\n  };\n  var onWindow = function onWindow(windowToListenOn) {\n    on(windowToListenOn, 'resize', setSize);\n    DRAF(setSize);\n  };\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useEffect(function () {\n    var iframe = ref.current;\n    if (!iframe) {\n      // iframe will be undefined if component is already unmounted\n      return;\n    }\n    if (iframe.contentWindow) {\n      window = iframe.contentWindow;\n      onWindow(window);\n    } else {\n      var onLoad_1 = function onLoad_1() {\n        on(iframe, 'load', onLoad_1);\n        window = iframe.contentWindow;\n        onWindow(window);\n      };\n      off(iframe, 'load', onLoad_1);\n    }\n    return function () {\n      if (window && window.removeEventListener) {\n        off(window, 'resize', setSize);\n      }\n    };\n  }, []);\n  style.position = 'relative';\n  var sized = React.cloneElement.apply(React, __spreadArrays([element, {\n    style: style\n  }], __spreadArrays([React.createElement('iframe', {\n    ref: ref,\n    style: {\n      background: 'transparent',\n      border: 'none',\n      height: '100%',\n      left: 0,\n      position: 'absolute',\n      top: 0,\n      width: '100%',\n      zIndex: -1\n    }\n  })], React.Children.toArray(element.props.children))));\n  return [sized, state];\n};\nexport default useSize;","map":null,"metadata":{},"sourceType":"module"}